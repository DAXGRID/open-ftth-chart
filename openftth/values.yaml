strimzi:
  zookeeper:
    replicas: 1
    storage:
      size: 10Gi
      deleteClaim: true
      storageClassName: ""
  kafka:
    replicas: 1
    config:
      autoCreateTopicsEnable: false
      replicationFactorOffsets: 1
      replicationFactorStatelog: 1
      stateLogMinIsr: 1
    storage:
      storageClassName: ""
      size: 10Gi
      deleteClaim: false
    # Uncomment this section to enable Kafka to be accessible externally,
    # This can be useful when debugging, or if external clients needs to access it.
    # Remember that when this is done, each broker is restarted, the cluster should be
    # able to handle it, but it is something to keep in mind.
    #   type: loadbalancer
    #   tls: false
  topics:
    domainRouteNetwork:
      partitions: 1
      replicas: 1
    requestRouteNetwork:
      partitions: 1
      replicas: 1
    postgresConnectorRouteNetwork:
      partitions: 1
      replicas: 1
    notificationGeoGraphicalAreaUpdated:
      partitions: 1
      replicas: 1
    notificationUtilityNetwork:
      partitions: 1
      replicas: 1
    notificationFileChanges:
      partitions: 1
      replicas: 1

api-gateway:
  replicas: 1
  loglevel: "Information"
  eventStoreDatabase:
    name: EVENT_STORE
    username: postgres
    password: postgres
  geoDatabase:
    name: OPEN_FTTH
    username: postgres
    password: postgres
  typesense:
    host: openftth-search-typesense
    apiKey: changeMe!
  auth:
    host: http://auth.openftth.local/auth/realms/openftth
    requireHttps: false
    audience: "account"
    enable: true

route-network-validator:
  loglevel: "Information"
  replicas: 1
  resources:
    requests:
      memory: 0Mi
    limits:
      memory: 0Gi
  database:
    database: OPEN_FTTH
    username: postgres
    password: postgres
    port: 5432
  eventStore:
    connectionString: "Host=openftth-event-store-postgresql;Port=5432;Username=postgres;Password=postgres;Database=EVENT_STORE"

gdb-integrator:
  replicas: 1
  loglevel: "Information"
  postgis:
    username: postgres
    password: postgres
  application:
    tolerance: "0.01"
    applicationName: "GDB_INTEGRATOR"
    sendGeographicalAreaUpdatedNotification: true
    enableSegmentEndsAutoSnappingToRouteNode: true
  eventStore:
    connectionString: "Host=openftth-event-store-postgresql;Port=5432;Username=postgres;Password=postgres;Database=EVENT_STORE"
  resources:
    requests:
      memory: 0Mi

postgis-connector:
  replicas: 1
  bootstrapServers: kafka-cluster-kafka-bootstrap:9093
  replicationFactor:
    config: 1
    offset: 1
    status: 1
  tls:
    trustedCertificates:
      secretName: kafka-cluster-cluster-ca-cert
      certificate: ca.crt
  postgis:
    username: postgres
    password: postgres

frontend:
  replicas: 1
  desktopBridgeUri: "ws://desktop-bridge.openftth.local"
  apiGatewayHttpUri: "http://api-gateway.openftth.local"
  apiGatewayWsUri: "ws://api-gateway.openftth.local"
  keyCloakUri: "http://auth.openftth.local/auth"
  routeNetworkTileServerUri: "http://tiles-routenetwork.openftth.local"
  basemapTileServerUri: "http://tiles-basemap.openftth.local"
  layers:
    - name: aerial-photo
      layerGroups:
        - text: Aerial Photo
          layers:
            - aerial_photo
  informationControlConfig:
    sourceLayers:
      - body: |
          <div>
            <p>Id: {id}</p>
            <p>Mrid: {properties.mrid}</p>
          </div>
        layer: route_network
        filter:
          property: properties.objecttype
          value: route_node
  maplibreJson: ""

postgis:
  username: postgres
  password: postgres
  serviceType: LoadBalancer
  serviceAnnotations: {}
  volumeClaim:
    storageClassName: ""
    storage: 10Gi
  resources:
    requests:
      memory: 1Gi

desktop-bridge:
  replicas: 1
  loglevel: "Information"

ingress:
  tls:
    enabled: false
    acme:
      email: ""
      server: ""
    hosts: {}
  domainNames:
    frontend: openftth.local
    desktopBridge: desktop-bridge.openftth.local
    apiGateway: api-gateway.openftth.local
    auth: auth.openftth.local
