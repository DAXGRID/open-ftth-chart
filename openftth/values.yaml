strimzi:
  zookeeper:
    replicas: 1
    storage:
      size: 10Gi
      deleteClaim: true
      storageClassName: ""
  kafka:
    replicas: 1
    config:
      autoCreateTopicsEnable: false
      replicationFactorOffsets: 1
      replicationFactorStatelog: 1
      stateLogMinIsr: 1
    storage:
      storageClassName: ""
      size: 10Gi
      deleteClaim: false
    external:
      type: nodeport
      tls: false
  topics:
    domainRouteNetwork:
      partitions: 1
      replicas: 1
    requestRouteNetwork:
      partitions: 1
      replicas: 1
    postgresConnectorRouteNetwork:
      partitions: 1
      replicas: 1
    notificationGeoGraphicalAreaUpdated:
      partitions: 1
      replicas: 1
    notificationUtilityNetwork:
      partitions: 1
      replicas: 1
    notificationFileChanges:
      partitions: 1
      replicas: 1

api-gateway:
  replicas: 1
  loglevel: "Information"
  eventStoreDatabase:
    name: EVENT_STORE
    username: postgres
    password: postgres
  geoDatabase:
    name: OPEN_FTTH
    username: postgres
    password: postgres
  typesense:
    host: openftth-search-typesense
    apiKey: changeMe!
  auth:
    host: http://auth.openftth.local/auth/realms/openftth
    requireHttps: false
    audience: "account"
    enable: false

route-network-validator:
  loglevel: "Information"
  replicas: 1
  resources:
    requests:
      memory: 0Mi
    limits:
      memory: 0Gi
  database:
    database: OPEN_FTTH
    username: postgres
    password: postgres
    port: 5432

gdb-integrator:
  replicas: 1
  loglevel: "Information"
  postgis:
    username: postgres
    password: postgres
  application:
    tolerance: "0.01"
    applicationName: "GDB_INTEGRATOR"
    sendGeographicalAreaUpdatedNotification: true
    enableSegmentEndsAutoSnappingToRouteNode: true
  resources:
    requests:
      memory: 0Mi

postgis-connector:
  replicas: 1
  bootstrapServers: kafka-cluster-kafka-bootstrap:9093
  replicationFactor:
    config: 1
    offset: 1
    status: 1
  tls:
    trustedCertificates:
      secretName: kafka-cluster-cluster-ca-cert
      certificate: ca.crt
  postgis:
    username: postgres
    password: postgres

frontend:
  replicas: 1
  desktopBridgeUri: "ws://desktop-bridge.openftth.local"
  apiGatewayHttpUri: "http://api-gateway.openftth.local"
  apiGatewayWsUri: "ws://api-gateway.openftth.local"
  keyCloakUri: "http://auth.openftth.local/auth"
  routeNetworkTileServerUri: "http://tiles-routenetwork.openftth.local"
  basemapTileServerUri: "http://tiles-basemap.openftth.local"
  layers:
    - name: "aerial-photo"
      layerToggles:
        - name: aerial_photo
          text: Aerial photo
      layer:
        type: raster
        tiles:
          - "https://services.kortforsyningen.dk/orto_foraar?token=d7a878f2b71f71248075981855a481b4&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&FORMAT=image/jpeg&TRANSPARENT=false&LAYERS=orto_foraar&STYLES=&WIDTH=256&HEIGHT=256&SRS=EPSG:3857&BBOX={bbox-epsg-3857}"
        tileSize: 256
    - name: custom
      layerToggles:
        - name: customer_area
          text: Customer area
      layer:
        type: vector
        tiles:
          - "http://tiles-custom.openftth.local/services/customer_area/tiles/{z}/{x}/{y}.pbf"
        minZoom: 0
        maxZoom: 14
        maxzoom: 17

postgis:
  username: postgres
  password: postgres
  serviceType: LoadBalancer
  serviceAnnotations: {}
  volumeClaim:
    storageClassName: ""
    storage: 10Gi
  resources:
    requests:
      memory: 1Gi

desktop-bridge:
  replicas: 1
  loglevel: "Information"

ingress:
  tls:
    enabled: false
    acme:
      email: ""
      server: ""
    hosts: {}
  domainNames:
    frontend: openftth.local
    desktopBridge: desktop-bridge.openftth.local
    apiGateway: api-gateway.openftth.local
    auth: auth.openftth.local
